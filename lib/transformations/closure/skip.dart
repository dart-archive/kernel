// Copyright (c) 2016, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// TODO(ahe): Delete this file, eventually all procedures should be converted.
library kernel.transformations.closure_conversion.skip;

import '../../ast.dart' show
    Class,
    Procedure;

/// Set of fully-qualified names of procedures that we don't perform closure
/// conversion on. Set is represented as a map as that can be a compile-time
/// constant.
const Map<String, int> skippedProcedures = const <String, int>{
  "dart:_vmservice::Client::onMessage": 0,
  "dart:_vmservice::DevFS::_createDevFS": 0,
  "dart:_vmservice::DevFS::_deleteDevFS": 0,
  "dart:_vmservice::DevFS::_listDevFS": 0,
  "dart:_vmservice::DevFS::_listDevFSFiles": 0,
  "dart:_vmservice::DevFS::_readDevFSFile": 0,
  "dart:_vmservice::DevFS::_writeDevFSFile": 0,
  "dart:_vmservice::DevFS::_writeDevFSFiles": 0,
  "dart:_vmservice::DevFS::handleMessage": 0,
  "dart:_vmservice::DevFS::handlePutStream": 0,
  "dart:_vmservice::Message::_setPath": 0,
  "dart:_vmservice::Message::send": 0,
  "dart:_vmservice::Message::sendToVM": 0,
  "dart:_vmservice::VMService::_exit": 0,
  "dart:_vmservice::VMService::_getCrashDump": 0,
  "dart:_vmservice::VMService::_spawnUri": 0,
  "dart:_vmservice::VMService::_streamCancel": 0,
  "dart:_vmservice::VMService::_streamListen": 0,
  "dart:_vmservice::_TarArchive::_readSize": 0,
  "dart:async::Future::": 0,
  "dart:async::Future::any": 0,
  "dart:async::Future::delayed": 0,
  "dart:async::Future::doWhile": 0,
  "dart:async::Future::forEach": 0,
  "dart:async::Future::microtask": 0,
  "dart:async::Future::wait": 0,
  "dart:async::Stream::any": 0,
  "dart:async::Stream::asyncExpand": 0,
  "dart:async::Stream::asyncMap": 0,
  "dart:async::Stream::contains": 0,
  "dart:async::Stream::elementAt": 0,
  "dart:async::Stream::every": 0,
  "dart:async::Stream::first": 0,
  "dart:async::Stream::firstWhere": 0,
  "dart:async::Stream::fold": 0,
  "dart:async::Stream::forEach": 0,
  "dart:async::Stream::fromFuture": 0,
  "dart:async::Stream::fromFutures": 0,
  "dart:async::Stream::fromIterable": 0,
  "dart:async::Stream::isEmpty": 0,
  "dart:async::Stream::join": 0,
  "dart:async::Stream::last": 0,
  "dart:async::Stream::lastWhere": 0,
  "dart:async::Stream::length": 0,
  "dart:async::Stream::periodic": 0,
  "dart:async::Stream::pipe": 0,
  "dart:async::Stream::reduce": 0,
  "dart:async::Stream::single": 0,
  "dart:async::Stream::singleWhere": 0,
  "dart:async::Stream::timeout": 0,
  "dart:async::Stream::toList": 0,
  "dart:async::Stream::toSet": 0,
  "dart:async::Timer::_createTimer": 0,
  "dart:async::_AddStreamState::cancel": 0,
  "dart:async::_AddStreamState::makeErrorHandler": 0,
  "dart:async::_AsyncStarStreamController::addStream": 0,
  "dart:async::_BufferingStreamSubscription::_sendDone": 0,
  "dart:async::_BufferingStreamSubscription::_sendError": 0,
  "dart:async::_BufferingStreamSubscription::asFuture": 0,
  "dart:async::_CustomZone::bindBinaryCallback": 0,
  "dart:async::_CustomZone::bindCallback": 0,
  "dart:async::_CustomZone::bindUnaryCallback": 0,
  "dart:async::_DoneStreamSubscription::asFuture": 0,
  "dart:async::_Future::_addListener": 0,
  "dart:async::_Future::_asyncComplete": 0,
  "dart:async::_Future::_asyncCompleteError": 0,
  "dart:async::_Future::_chainForeignFuture": 0,
  "dart:async::_Future::_prependListeners": 0,
  "dart:async::_Future::_propagateToListeners": 0,
  "dart:async::_Future::timeout": 0,
  "dart:async::_PendingEvents::schedule": 0,
  "dart:async::_RootZone::bindBinaryCallback": 0,
  "dart:async::_RootZone::bindCallback": 0,
  "dart:async::_RootZone::bindUnaryCallback": 0,
  "dart:async::_StreamController::_recordCancel": 0,
  "dart:async::_StreamController::_subscribe": 0,
  "dart:async::_SyncBroadcastStreamController::_sendData": 0,
  "dart:async::_SyncBroadcastStreamController::_sendDone": 0,
  "dart:async::_SyncBroadcastStreamController::_sendError": 0,
  "dart:collection::HashMap::from": 0,
  "dart:collection::LinkedHashMap::from": 0,
  "dart:collection::Maps::getValues": 0,
  "dart:collection::Maps::mapToString": 0,
  "dart:collection::SplayTreeMap::addAll": 0,
  "dart:collection::SplayTreeMap::containsValue": 0,
  "dart:collection::SplayTreeMap::from": 0,
  "dart:collection::_HashMap::addAll": 0,
  "dart:collection::_HashMapKeyIterable::forEach": 0,
  "dart:collection::_HashMapValueIterable::forEach": 0,
  "dart:convert::Converter::bind": 0,
  "dart:convert::Encoding::decodeStream": 0,
  "dart:convert::JsonUtf8Encoder::convert": 0,
  "dart:convert::LineSplitter::bind": 0,
  "dart:convert::LineSplitter::split": 0,
  "dart:convert::_JsonPrettyPrintMixin::writeMap": 0,
  "dart:convert::_JsonStringStringifier&_JsonPrettyPrintMixin::writeMap": 0,
  "dart:convert::_JsonStringifier::writeMap": 0,
  "dart:convert::_JsonUtf8Stringifier&_JsonPrettyPrintMixin::writeMap": 0,
  "dart:convert::_Utf8Decoder::convert": 0,
  "dart:core::DateTime::parse": 0,
  "dart:core::Duration::toString": 0,
  "dart:core::Function::apply": 0,
  "dart:core::NoSuchMethodError::toString": 0,
  "dart:core::Object::_symbolMapToStringMap": 0,
  "dart:core::Uri::_parseIPv4Address": 0,
  "dart:core::Uri::parseIPv6Address": 0,
  "dart:core::Uri::splitQueryString": 0,
  "dart:core::UriData::_writeUri": 0,
  "dart:core::_LibraryPrefix::loadLibrary": 0,
  "dart:core::_Uri::_checkNonWindowsPathReservedCharacters": 0,
  "dart:core::_Uri::_makePath": 0,
  "dart:core::_Uri::_makeQuery": 0,
  "dart:core::_Uri::_splitQueryStringAll": 0,
  "dart:core::_Uri::notSimple": 0,
  "dart:isolate::Isolate::_spawnCommon": 0,
  "dart:isolate::Isolate::errors": 0,
  "dart:isolate::Isolate::spawn": 0,
  "dart:isolate::Isolate::spawnUri": 0,
  "dart:mirrors::MirrorSystem::findLibrary": 0,
  "dart:mirrors::_LocalClassMirror::_mixinApplicationName": 0,
  "dart:mirrors::_LocalClassMirror::instanceMembers": 0,
  "dart:mirrors::_LocalClassMirror::newInstance": 0,
  "dart:mirrors::_LocalClassMirror::staticMembers": 0,
  "dart:mirrors::_LocalInstanceMirror::_getFieldSlow": 0,
  "dart:mirrors::_LocalInstanceMirror::_setFieldSlow": 0,
  "dart:mirrors::_LocalInstanceMirror::invoke": 0,
  "dart:mirrors::_LocalLibraryDependencyMirror::loadLibrary": 0,
  "dart:mirrors::_LocalMirrorSystem::libraries": 0,
  "dart:mirrors::_LocalObjectMirror::invoke": 0,
  "dart:_internal::_dynamicError": 0,
  "dart:async::_asyncErrorWrapperHelper": 0,
  "dart:async::_asyncThenWrapperHelper": 0,
  "dart:async::_cancelAndError": 0,
  "dart:async::_cancelAndErrorClosure": 0,
  "dart:async::_cancelAndValue": 0,
  "dart:async::_rootHandleUncaughtError": 0,
  "dart:async::runZoned": 0,
  "dart:core::_createTables": 0,
  "dart:developer::_runExtension": 0,
  "dart:isolate::_startIsolate": 0,
};

/// Returns true if [node] should be closure converted.
bool convertClosures(Procedure node) {
  String lib = "${node.enclosingLibrary.importUri}";
  String name = node.name.name;
  String fqn = node.parent is Class
      ? "$lib::${node.enclosingClass.name}::$name"
      : "$lib::$name";
  return !skippedProcedures.containsKey(fqn);
}
