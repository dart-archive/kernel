library;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

class Closure#0 extends core::Object implements core::Function {
  field _in::Context context;
  constructor •(final _in::Context #t1) → dynamic
    : self::Closure#0::context = #t1
    ;
  method call(dynamic x) → dynamic {
    final _in::Context #t2 = |{
                                "This is a temporary solution. In the VM, this will become an additional parameter.";

                                => this.{self::Closure#0::context}
                             }| ;
    return #t2.[](0).[](x);
  }
}
static field dynamic f;
static method foo() → dynamic {
  core::print(self::f.call(0));
}
static method main(dynamic arguments) → dynamic {
  final _in::Context #t3 = new _in::Context::•(1);
  #t3.parent = null;
  #t3.[]=(0, arguments);
  self::f = new self::Closure#0::•(invalid-expression);
  self::foo();
}
