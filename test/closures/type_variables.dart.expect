library;
import self as self;
import "dart:core" as core;
import "dart:mock" as mock;

class C<T> extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  method foo() → dynamic {
    return new self::Closure#0::•(null);
  }
}
class Closure#0 extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t1) → dynamic
    : self::Closure#0::context = #t1
    ;
  method call(dynamic x) → dynamic {
    final mock::Context #t2 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";

                                 => this.{self::Closure#0::context}
                              }| ;
    dynamic y = x;
    core::Object z = y;
    self::C<dynamic> self = this;
    return z as dynamic;
  }
}
static method main(dynamic arguments) → dynamic {
  core::print(new self::C::•<core::String>().foo().call(arguments.first));
}
