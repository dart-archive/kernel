library;
import self as self;
import "dart:core" as core;
import "dart:mock" as mock;

class C<T extends core::Object, S extends core::Object> extends core::Object {
  constructor internal() → void
    : super core::Object::•()
    ;
  method foo(self::C::S s) → dynamic {
    return new self::Closure#0::•<self::C::T, self::C::S>(null);
  }
  method bar() → dynamic {
    self::C<self::C::T, self::C::S> self = this;
  }
  static factory •<T extends core::Object, S extends core::Object>() → self::C<self::C::•::T, self::C::•::S> {
    final dynamic local = new self::Closure#1::•<self::C::•::T, self::C::•::S>(null);
    return local.call();
  }
}
class Closure#0<T extends core::Object, S extends core::Object> extends core::Object implements core::Function { // from null
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t1) → dynamic
    : self::Closure#0::context = #t1
    ;
  method call(self::Closure#0::T x) → dynamic {
    final mock::Context #t2 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";
                                 => this.{self::Closure#0::context}
                              }|;
    self::Closure#0::T y = x;
    core::Object z = y;
    self::C<self::Closure#0::T, self::Closure#0::S> self = this;
    return z as self::Closure#0::T;
  }
}
class Closure#1<T extends core::Object, S extends core::Object> extends core::Object implements core::Function { // from null
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t3) → dynamic
    : self::Closure#1::context = #t3
    ;
  method call() → dynamic {
    final mock::Context #t4 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";
                                 => this.{self::Closure#1::context}
                              }|;
    self::C<self::Closure#1::T, self::Closure#1::S> self = new self::C::internal<self::Closure#1::T, self::Closure#1::S>();
    return self;
  }
}
static method main(dynamic arguments) → dynamic {
  core::print(self::C::•<core::String, core::String>().foo(null).call(arguments.first));
}
