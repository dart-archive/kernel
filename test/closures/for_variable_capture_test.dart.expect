library;
import self as self;
import "dart:core" as core;
import "dart:mock" as mock;

class Closure#0 extends core::Object implements core::Function { // from null
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t1) → dynamic
    : self::Closure#0::context = #t1
    ;
  method call() → dynamic {
    final mock::Context #t2 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";

                                 => this.{self::Closure#0::context}
                              }| ;
    return #t2.[](0);
  }
}
static method main() → dynamic {
  dynamic closure;
  try {
    {
      final mock::Context #t3 = new mock::Context::•(1);
      #t3.parent = null;
      #t3.[]=(0, 0);
      dynamic fn = new self::Closure#0::•(#t3);
      for(; #t3.[](0).<(3); #t3.[]=(0, #t3.[](0).+(1))) {
        {
          #t3.[]=(0, #t3.[](0).+(1));
          closure = fn;
        }
        throw "Context refresh not implemented";
      }
    }
  }
  on core::String catch(no-exception-var) {
    return;
  }
  dynamic x = closure.call();
  if(!x.==(1)) {
    throw "Expected 1, but got ${x}.";
  }
}
