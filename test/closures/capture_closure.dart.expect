library;
import self as self;
import "dart:core" as core;
import "dart:mock" as mock;

class Closure#0 extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t1) → dynamic
    : self::Closure#0::context = #t1
    ;
  method call() → dynamic {
    final mock::Context #t2 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";

                                 => this.{self::Closure#0::context}
                              }| ;
    return null;
  }
}
class Closure#1 extends core::Object implements core::Function {
  field core::String note = "This is temporary. The VM doesn't need closure classes.";
  field mock::Context context;
  constructor •(final mock::Context #t3) → dynamic
    : self::Closure#1::context = #t3
    ;
  method call() → dynamic {
    final mock::Context #t4 = |{
                                  "This is a temporary solution. In the VM, this will become an additional parameter.";

                                 => this.{self::Closure#1::context}
                              }| ;
    return #t4.[](0).call();
  }
}
static method main(dynamic arguments) → dynamic {
  final mock::Context #t5 = new mock::Context::•(1);
  #t5.parent = null;
  #t5.[]=(0, new self::Closure#0::•(#t5));
  final dynamic g = new self::Closure#1::•(#t5);
  g.call();
}
